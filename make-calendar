#!/usr/bin/python3
from fpdf import FPDF
import datetime

font = 'Arial'
year = 2022

pdf = FPDF(
	orientation='portrait',
	unit='mm',
	format='A4',
)

# a4 sizes in mm
w = 210
h = 297

links = {}
days = [ "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" ]
months = [ "None", "January", "Febuary", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ]

# Create internal links for every day of the year as well as month pages
for mon in range(1,12+1):
	# month overview page
	links["%04d-%02d" % (year, mon)] = pdf.add_link()

	for day in range(1,31+1):
		links["%04d-%02d-%02d" % (year,mon,day)] = pdf.add_link()

def add_calendar(pdf, year, mon, highlight, size, x, y, day_font = None, border=False, include_year = False):
	week = 1.5 # skip the heading
	xsize = size
	if not day_font:
		day_font = size * 1.5

	pdf.set_font(font, 'B', 2*size)
	pdf.set_text_color(255)
	pdf.set_fill_color(20)

	if include_year:
		header = "%s %04d" % (months[mon], year)
	else:
		header = months[mon]

	pdf.set_xy(x,y)
	pdf.cell(
		w = 7 * xsize,
		h = 1.5 * size,
		txt = header,
		align = 'C',
		fill = True,
		link = links["%04d-%02d" % (year,mon)]
	)

	# draw the days of the week above the table
	pdf.set_fill_color(180)
	pdf.set_font(font, '', size)
	for weekday in range(0,7):
		pdf.set_xy(x + weekday * xsize, y + week * size)
		pdf.cell(
			h = size * 0.5,
			w = xsize,
			txt = days[weekday],
			fill = True,
			align = 'C',
		)

	week += 0.5
		
	# draw the table for days of the month
	pdf.set_font(font, '', day_font)
	pdf.set_text_color(0)

	for day in range(1,31+1):
		try:
			date = datetime.date(year, mon, day)
		except Exception as e:
			continue

		weekday = date.weekday()
		link = links["%04d-%02d-%02d" % (year,mon,day)]

		if weekday == 0 and day != 0:
			week += 1

		pdf.set_xy(x + weekday * xsize, y + week * size)
		pdf.cell(
			h = size,
			w = xsize,
			txt = "%d" % (day),
			align = 'R',
			link = link,
			fill = day == highlight,
			border = border,
		)


# Create the title page
pdf.add_page()
pdf.set_font(font, 'B', 40)
pdf.set_xy(0, 0)
pdf.cell(txt="%04d" % (year), align='C', border=1, w=w, h=20)

for mon in range(0,12):
	xsize = 10 * 7
	ysize = 9 * 7
	add_calendar(
		pdf,
		year,
		mon + 1,
		-1,
		8,
		(mon % 3) * xsize + 10,
		(mon // 3) * ysize + 20,
	)

# Now create all of the month and day
for mon in range(1,12+1):
	# month overview page
	pdf.add_page()
	pdf.set_link(links["%04d-%02d" % (year, mon)])

	add_calendar(
		pdf,
		year,
		mon,
		-1,
		30,
		0,
		0,
		day_font=12,
		border=True,
		include_year=True,
	)
	
	for day in range(1,31+1):
		try:
			date = datetime.date(year, mon, day)
		except Exception as e:
			continue

		pdf.add_page()
		pdf.set_link(links["%04d-%02d-%02d" %(year,mon,day)])
		#pdf.set_font(font, 'B', 40)
		#pdf.set_xy(0, h/2)
		#pdf.cell(txt="%04d %s %d" % (year,months[mon], day), align='C', border=1, ln=1, w=w, h=40)

		add_calendar(pdf, year, mon, day, 8, w - 7 * 8, 0, include_year=True)

		if mon > 1:
			add_calendar(pdf, year, mon - 1, -1, 4, w - 7 * 8, 8*8)
		if mon < 12:
			add_calendar(pdf, year, mon + 1, -1, 4, w - 7 * 8/2, 8*8)
		

pdf.output('test.pdf', 'F')

